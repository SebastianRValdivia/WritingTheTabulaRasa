{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tabula Rasa Proyect Writing The Tabula Rasa Writing Tabula Rasa (software) developement is based in this guide/esearch. Any feature that is part of the software is to fulfill the requirements of this thesis. Requested features and improvements must be debated and added to this paper. Any sugested objectives must contain the proper research and evidence. You can read it here FAQ Is it a note taking app? Well no, not really, just part of it. Can be used as one tho but is kind of a bloat for it. It suits more to be describe it as a note organizator. Software documentation Index Software code documentation [How to commit] [Front end] [Back end]","title":"Tabula Rasa Proyect"},{"location":"#tabula-rasa-proyect","text":"","title":"Tabula Rasa Proyect"},{"location":"#writing-the-tabula-rasa","text":"Writing Tabula Rasa (software) developement is based in this guide/esearch. Any feature that is part of the software is to fulfill the requirements of this thesis. Requested features and improvements must be debated and added to this paper. Any sugested objectives must contain the proper research and evidence. You can read it here","title":"Writing The Tabula Rasa"},{"location":"#faq","text":"","title":"FAQ"},{"location":"#is-it-a-note-taking-app","text":"Well no, not really, just part of it. Can be used as one tho but is kind of a bloat for it. It suits more to be describe it as a note organizator.","title":"Is it a note taking app?"},{"location":"#software-documentation-index","text":"Software code documentation [How to commit] [Front end] [Back end]","title":"Software documentation Index"},{"location":"SoftwareCodeDocumentation/","text":"The Software The project is splited in parts server side and client/s side . Back End its lead by Python + Django and REST Framework. Front end web app is made in Vue using the Quasar framework. And version control is lead by, yes you guess it, Git . To contribute use the standar PR of github method and please read how to write commits titles below. Code Review and Guide Like any software there is a guide of how to contribute to the code. Since the code is all in one repository, its separated in parts. Need a guide to know how things work before jumping to the code? Check the each (or all). Server Guide Lite web site Client guide Documentation The documentation of the code (not the software) is split in hierarchy level. Each part is contained inside the folders in a README markdown file. In this files we describe the functions of the module along each file or subfolder inside. Lets avoid long and unformatted comments. Comments are only used to describe very specific parts or steps inside a file. How to commit Its a hard requirement to write commit titles with this initial words. This is used to automate an changelog. If this condition is not met PR won't pass. Word Description Add addition to code, new feature, missing method, etc Fix fix of an bug, error or linter warning Move move/cut or rename a file Delete delete useless or buggy code Refactor refactor or improve a part of code (does not applies to tests) Change change or replace a functionality for something else Create start a new module or section Remove Delete a module Test add or improve tests (any type) Install install or update new dependency Uninstall uninstall a dependency Start is reserved to start of the project or a sub-project. Note: you can use the comment section of the commit at will. Branches naming convention The most important branches are: main (development head) and release-{number} (supported releases). All branches use hyphens as word separators. Branches starting with different names are for work in progress. Their named like feature-{name}, install-{what is installed or updated?}, fix-{what is fixed?}, test-{what for?} and docs-{what is it about?}. Once the work is done a pr is required to join the main branch. System requirements Table of the software requirements extracted from the book # Requirement Book section 1 A timer for working and resting intervals A.4.3.2 2 Calendar to plan goals and objectives A.4.3.3 3 Resource collection for an investigation B.1.2 4 Resume of the resources in the collection B.2.2.1 5 Slip box note system B.2.2 6 Relationship between notes B.2.2.4 7 Practice tracker B.3.3 8 Study activities B.3.4 9 Memorization activities B.4.1 10 Quizzes B.4.2.1.1 11 Flash cards B.4.2.1.2 12 Projects B.4.2.2 13 Diagrams C.2.1 14 Images C.2.2 14 Tables C.2.3 15 Encyclopedia (wiki) C.3.1 16 Cheat sheets C.3.2 17 How to guides C.3.3 18 Essays C.3.4 19 Bibliography references C.3.5 20 Catalogs of the literary resources C.4.1.1.2 21 Custom metadata C.4.3 22 Categorization and relationships between resources C.4.5 User stories The development of WTR is linear, however user stories are great to describe the required process of an user action. Also, they are used to define the functional tests. The complete list of user stories can be found here","title":"The Software"},{"location":"SoftwareCodeDocumentation/#the-software","text":"The project is splited in parts server side and client/s side . Back End its lead by Python + Django and REST Framework. Front end web app is made in Vue using the Quasar framework. And version control is lead by, yes you guess it, Git . To contribute use the standar PR of github method and please read how to write commits titles below.","title":"The Software"},{"location":"SoftwareCodeDocumentation/#code-review-and-guide","text":"Like any software there is a guide of how to contribute to the code. Since the code is all in one repository, its separated in parts. Need a guide to know how things work before jumping to the code? Check the each (or all). Server Guide Lite web site Client guide","title":"Code Review and Guide"},{"location":"SoftwareCodeDocumentation/#documentation","text":"The documentation of the code (not the software) is split in hierarchy level. Each part is contained inside the folders in a README markdown file. In this files we describe the functions of the module along each file or subfolder inside. Lets avoid long and unformatted comments. Comments are only used to describe very specific parts or steps inside a file.","title":"Documentation"},{"location":"SoftwareCodeDocumentation/#how-to-commit","text":"Its a hard requirement to write commit titles with this initial words. This is used to automate an changelog. If this condition is not met PR won't pass. Word Description Add addition to code, new feature, missing method, etc Fix fix of an bug, error or linter warning Move move/cut or rename a file Delete delete useless or buggy code Refactor refactor or improve a part of code (does not applies to tests) Change change or replace a functionality for something else Create start a new module or section Remove Delete a module Test add or improve tests (any type) Install install or update new dependency Uninstall uninstall a dependency Start is reserved to start of the project or a sub-project. Note: you can use the comment section of the commit at will.","title":"How to commit"},{"location":"SoftwareCodeDocumentation/#branches-naming-convention","text":"The most important branches are: main (development head) and release-{number} (supported releases). All branches use hyphens as word separators. Branches starting with different names are for work in progress. Their named like feature-{name}, install-{what is installed or updated?}, fix-{what is fixed?}, test-{what for?} and docs-{what is it about?}. Once the work is done a pr is required to join the main branch.","title":"Branches naming convention"},{"location":"SoftwareCodeDocumentation/#system-requirements","text":"Table of the software requirements extracted from the book # Requirement Book section 1 A timer for working and resting intervals A.4.3.2 2 Calendar to plan goals and objectives A.4.3.3 3 Resource collection for an investigation B.1.2 4 Resume of the resources in the collection B.2.2.1 5 Slip box note system B.2.2 6 Relationship between notes B.2.2.4 7 Practice tracker B.3.3 8 Study activities B.3.4 9 Memorization activities B.4.1 10 Quizzes B.4.2.1.1 11 Flash cards B.4.2.1.2 12 Projects B.4.2.2 13 Diagrams C.2.1 14 Images C.2.2 14 Tables C.2.3 15 Encyclopedia (wiki) C.3.1 16 Cheat sheets C.3.2 17 How to guides C.3.3 18 Essays C.3.4 19 Bibliography references C.3.5 20 Catalogs of the literary resources C.4.1.1.2 21 Custom metadata C.4.3 22 Categorization and relationships between resources C.4.5","title":"System requirements"},{"location":"SoftwareCodeDocumentation/#user-stories","text":"The development of WTR is linear, however user stories are great to describe the required process of an user action. Also, they are used to define the functional tests. The complete list of user stories can be found here","title":"User stories"},{"location":"SoftwareCodeDocumentation/Backend/","text":"Back end Services Django API Tabula rasa web api is developed with django. Check its guide","title":"Back end Services"},{"location":"SoftwareCodeDocumentation/Backend/#back-end-services","text":"","title":"Back end Services"},{"location":"SoftwareCodeDocumentation/Backend/#django-api","text":"Tabula rasa web api is developed with django. Check its guide","title":"Django API"},{"location":"SoftwareCodeDocumentation/Backend/Api/","text":"Django API It's the part of the django project that builds the RESTfull API (generally called just api). Applications Django applications for tabula rasa are under the applications/ module (not from the root). Each application got his own api views and urls wich are segregated from the api/ module (which is itself an app too). The models are serialized in serializers.py to create different types of views. Some are more complete others are more lightweight, to fulfill the use case in the most efficient way. With them we create the views or view sets and list them in api_urls.py (not in urls.py), so it can be imported from the api app. The api app This its more like an layer for creating the urls for the api. Instead of creating in each app the api urls and lite urls leading to a complex urls.py, we just use this module so they are all include from the urls.py of this app and not locally. Testing Each app tests are organized from it's models to have a more clear structure. The tests secure the basic functionality of the app, also they check the urls are correct and follow the standards.","title":"Django API"},{"location":"SoftwareCodeDocumentation/Backend/Api/#django-api","text":"It's the part of the django project that builds the RESTfull API (generally called just api).","title":"Django API"},{"location":"SoftwareCodeDocumentation/Backend/Api/#applications","text":"Django applications for tabula rasa are under the applications/ module (not from the root). Each application got his own api views and urls wich are segregated from the api/ module (which is itself an app too). The models are serialized in serializers.py to create different types of views. Some are more complete others are more lightweight, to fulfill the use case in the most efficient way. With them we create the views or view sets and list them in api_urls.py (not in urls.py), so it can be imported from the api app.","title":"Applications"},{"location":"SoftwareCodeDocumentation/Backend/Api/#the-api-app","text":"This its more like an layer for creating the urls for the api. Instead of creating in each app the api urls and lite urls leading to a complex urls.py, we just use this module so they are all include from the urls.py of this app and not locally.","title":"The api app"},{"location":"SoftwareCodeDocumentation/Backend/Api/#testing","text":"Each app tests are organized from it's models to have a more clear structure. The tests secure the basic functionality of the app, also they check the urls are correct and follow the standards.","title":"Testing"},{"location":"SoftwareCodeDocumentation/Lite/","text":"Lightweight web site The lite web site is a server rendered application based on django to interact with the functionalities of Writing Tabula Rasa using a simple and resourceless web interface. Objective The objective of this UI is to be an accessible and fast method to approach the core functionalities of the project, so it can be used in low end devices and/or low connection situations. Unlike the web app it doesn't focus on user experience but in reliability and speed. It's idea is to not require high end hardware by splitting the intensity of the UI drawing from the client using the hosting computer as a helper and crude interface. Pros: Quick connection Doesn't use much resources Server rendered Straightforward Cons Lack of style Poor accessibility Raw controls","title":"Lightweight web site"},{"location":"SoftwareCodeDocumentation/Lite/#lightweight-web-site","text":"The lite web site is a server rendered application based on django to interact with the functionalities of Writing Tabula Rasa using a simple and resourceless web interface.","title":"Lightweight web site"},{"location":"SoftwareCodeDocumentation/Lite/#objective","text":"The objective of this UI is to be an accessible and fast method to approach the core functionalities of the project, so it can be used in low end devices and/or low connection situations. Unlike the web app it doesn't focus on user experience but in reliability and speed. It's idea is to not require high end hardware by splitting the intensity of the UI drawing from the client using the hosting computer as a helper and crude interface.","title":"Objective"},{"location":"SoftwareCodeDocumentation/Lite/#pros","text":"Quick connection Doesn't use much resources Server rendered Straightforward","title":"Pros:"},{"location":"SoftwareCodeDocumentation/Lite/#cons","text":"Lack of style Poor accessibility Raw controls","title":"Cons"},{"location":"SoftwareCodeDocumentation/UserStories/","text":"User stories of WTR An user story is a narration where an activity of the software is described by the point of view of an user. Each one narrates how he should start and complete the task he wants to do. In here we narrate this user stories of the WTR system. We only describe based on the user interface provided by the web client interface (web app and the lite version). They are classified by task that are only available to a registered user (non admin) and an external visitor (this are activities a registered user can do too). Registered user Add note User opens user menu and click on notes User clicks on add new note button User enters id of note, the title and the content (id determines the parents) User saves the note and can see it in the list Alternative routes Note id not available User sees a warning and can't save the note Add task User opens user menu and click on tasks User sees a list of his tasks and an input for a new one User fills the input and click add button User sees the new task listed Alternative routes User click on dependency and add an available id Add task User opens user menu and click on tasks User sees a list of his tasks and an input for a new one User fills the input and click add button User sees the new task listed Add research User click research link in the navigation bar User click on star a new research User completes the initial information and objectives of the research User click on start research and is redirected to the page Add a stage of a research process User goes to research page User click on add stage User completes stage information and click save User sees the new stage listed in the research process page Add research resource User click research link in the navigation bar User goes to the research he is working on User click on add resource User fill the resource information and description User click on save the resource and it's added to the research Add cheat sheet User goes to cheat sheet list from the navigation bar User click on add button User goes to new cheat sheet page User inputs title and some cheat User saves cheat sheet Add activity User goes to activity page User click on new activity button User fills the activities exercises User saves the activity Complete task User opens user menu and click on tasks User click on the check mark to complete task Do activity User click on the activity he wants to do User answers the quizzes questions User click finish User sees result and time expend Delete note User opens user menu and click on notes User find the note it wants to delete in the list of notes User click note and sees the delete button User click the delete button and is ask to confirm User confirms and note is deleted, children are moved one level above Delete a research User goes to the research page User click on delete research button User is prompted with a confirmation User confirms an confirms and deletes the research Delete task User opens user menu and click on tasks User find the task it wants to delete in the list of tasks User clicks on delete button and is ask to confirm User confirms and task is deleted Delete cheat sheet User goes to cheat sheet page User click on edit button User sees edition of cheat sheet page User click on delete sheet User is prompted with a confirmation User confirm and deletes the cheat sheet Delete a cheat User goes to cheat sheet page User click on edit button User sees edition of sheet User click on delete button of a cheat User is prompted with a confirmation User confirm and deletes the cheat Log In User comes to site and sees the log in link in the navigation bar User click in the log in link and is required to log in form User completes the username and password fields and clicks log in User is redirected to home and sees the button to access the user menu in the navigation bar Log out User goes to the user menu and sees the log out button User click the button and is redirected to home and has no access to any user activities Modify note User opens user menu and click on notes User click in the note he wants to modify from the list User click edit mode and can see editing tools (except for id) User modify content or title and click on save User sees note with the new content Modify cheat sheet User open the cheat sheet page User click on the sheet he wants to modify User enters the editor page with the sheet data User does the modification and click saves User is redirected to the preview page of the sheet with the new modification Modify encyclopedia page User opens encyclopedia page User click on edit button User enter the editor with the current page data User does the modification and click saves User is redirected to the preview page of the encyclopedia with the new modification Visit notes User opens user menu and click on notes User sees a list of his notes User clicks one and is prompted by the note id, title and content Visitor View encyclopedia page User click on encyclopedia link from the navigation bar User sees a list of recent pages and search tools User finds the one he wants to read and click on it User is redirected to the view of the encyclopedia page View cheat sheet User click on cheat sheets link from the navigation bar User sees a list of cheat sheets and click on the one he want to see User is redirected to the view of the cheat sheets View research process User clicks on research link from the navigation bar and sees a list of researches User search a particular research process and click it User sees research information and steps User sees resources used for the research process View bibliographic resources User clicks on resources from the navigation bar User select explore books User sees a list of books used in the system","title":"User stories of WTR"},{"location":"SoftwareCodeDocumentation/UserStories/#user-stories-of-wtr","text":"An user story is a narration where an activity of the software is described by the point of view of an user. Each one narrates how he should start and complete the task he wants to do. In here we narrate this user stories of the WTR system. We only describe based on the user interface provided by the web client interface (web app and the lite version). They are classified by task that are only available to a registered user (non admin) and an external visitor (this are activities a registered user can do too).","title":"User stories of WTR"},{"location":"SoftwareCodeDocumentation/UserStories/#registered-user","text":"","title":"Registered user"},{"location":"SoftwareCodeDocumentation/UserStories/#add-note","text":"User opens user menu and click on notes User clicks on add new note button User enters id of note, the title and the content (id determines the parents) User saves the note and can see it in the list","title":"Add note"},{"location":"SoftwareCodeDocumentation/UserStories/#alternative-routes","text":"Note id not available User sees a warning and can't save the note","title":"Alternative routes"},{"location":"SoftwareCodeDocumentation/UserStories/#add-task","text":"User opens user menu and click on tasks User sees a list of his tasks and an input for a new one User fills the input and click add button User sees the new task listed","title":"Add task"},{"location":"SoftwareCodeDocumentation/UserStories/#alternative-routes_1","text":"User click on dependency and add an available id","title":"Alternative routes"},{"location":"SoftwareCodeDocumentation/UserStories/#add-task_1","text":"User opens user menu and click on tasks User sees a list of his tasks and an input for a new one User fills the input and click add button User sees the new task listed","title":"Add task"},{"location":"SoftwareCodeDocumentation/UserStories/#add-research","text":"User click research link in the navigation bar User click on star a new research User completes the initial information and objectives of the research User click on start research and is redirected to the page","title":"Add research"},{"location":"SoftwareCodeDocumentation/UserStories/#add-a-stage-of-a-research-process","text":"User goes to research page User click on add stage User completes stage information and click save User sees the new stage listed in the research process page","title":"Add a stage of a research process"},{"location":"SoftwareCodeDocumentation/UserStories/#add-research-resource","text":"User click research link in the navigation bar User goes to the research he is working on User click on add resource User fill the resource information and description User click on save the resource and it's added to the research","title":"Add research resource"},{"location":"SoftwareCodeDocumentation/UserStories/#add-cheat-sheet","text":"User goes to cheat sheet list from the navigation bar User click on add button User goes to new cheat sheet page User inputs title and some cheat User saves cheat sheet","title":"Add cheat sheet"},{"location":"SoftwareCodeDocumentation/UserStories/#add-activity","text":"User goes to activity page User click on new activity button User fills the activities exercises User saves the activity","title":"Add activity"},{"location":"SoftwareCodeDocumentation/UserStories/#complete-task","text":"User opens user menu and click on tasks User click on the check mark to complete task","title":"Complete task"},{"location":"SoftwareCodeDocumentation/UserStories/#do-activity","text":"User click on the activity he wants to do User answers the quizzes questions User click finish User sees result and time expend","title":"Do activity"},{"location":"SoftwareCodeDocumentation/UserStories/#delete-note","text":"User opens user menu and click on notes User find the note it wants to delete in the list of notes User click note and sees the delete button User click the delete button and is ask to confirm User confirms and note is deleted, children are moved one level above","title":"Delete note"},{"location":"SoftwareCodeDocumentation/UserStories/#delete-a-research","text":"User goes to the research page User click on delete research button User is prompted with a confirmation User confirms an confirms and deletes the research","title":"Delete a research"},{"location":"SoftwareCodeDocumentation/UserStories/#delete-task","text":"User opens user menu and click on tasks User find the task it wants to delete in the list of tasks User clicks on delete button and is ask to confirm User confirms and task is deleted","title":"Delete task"},{"location":"SoftwareCodeDocumentation/UserStories/#delete-cheat-sheet","text":"User goes to cheat sheet page User click on edit button User sees edition of cheat sheet page User click on delete sheet User is prompted with a confirmation User confirm and deletes the cheat sheet","title":"Delete cheat sheet"},{"location":"SoftwareCodeDocumentation/UserStories/#delete-a-cheat","text":"User goes to cheat sheet page User click on edit button User sees edition of sheet User click on delete button of a cheat User is prompted with a confirmation User confirm and deletes the cheat","title":"Delete a cheat"},{"location":"SoftwareCodeDocumentation/UserStories/#log-in","text":"User comes to site and sees the log in link in the navigation bar User click in the log in link and is required to log in form User completes the username and password fields and clicks log in User is redirected to home and sees the button to access the user menu in the navigation bar","title":"Log In"},{"location":"SoftwareCodeDocumentation/UserStories/#log-out","text":"User goes to the user menu and sees the log out button User click the button and is redirected to home and has no access to any user activities","title":"Log out"},{"location":"SoftwareCodeDocumentation/UserStories/#modify-note","text":"User opens user menu and click on notes User click in the note he wants to modify from the list User click edit mode and can see editing tools (except for id) User modify content or title and click on save User sees note with the new content","title":"Modify note"},{"location":"SoftwareCodeDocumentation/UserStories/#modify-cheat-sheet","text":"User open the cheat sheet page User click on the sheet he wants to modify User enters the editor page with the sheet data User does the modification and click saves User is redirected to the preview page of the sheet with the new modification","title":"Modify cheat sheet"},{"location":"SoftwareCodeDocumentation/UserStories/#modify-encyclopedia-page","text":"User opens encyclopedia page User click on edit button User enter the editor with the current page data User does the modification and click saves User is redirected to the preview page of the encyclopedia with the new modification","title":"Modify encyclopedia page"},{"location":"SoftwareCodeDocumentation/UserStories/#visit-notes","text":"User opens user menu and click on notes User sees a list of his notes User clicks one and is prompted by the note id, title and content","title":"Visit notes"},{"location":"SoftwareCodeDocumentation/UserStories/#visitor","text":"","title":"Visitor"},{"location":"SoftwareCodeDocumentation/UserStories/#view-encyclopedia-page","text":"User click on encyclopedia link from the navigation bar User sees a list of recent pages and search tools User finds the one he wants to read and click on it User is redirected to the view of the encyclopedia page","title":"View encyclopedia page"},{"location":"SoftwareCodeDocumentation/UserStories/#view-cheat-sheet","text":"User click on cheat sheets link from the navigation bar User sees a list of cheat sheets and click on the one he want to see User is redirected to the view of the cheat sheets","title":"View cheat sheet"},{"location":"SoftwareCodeDocumentation/UserStories/#view-research-process","text":"User clicks on research link from the navigation bar and sees a list of researches User search a particular research process and click it User sees research information and steps User sees resources used for the research process","title":"View research process"},{"location":"SoftwareCodeDocumentation/UserStories/#view-bibliographic-resources","text":"User clicks on resources from the navigation bar User select explore books User sees a list of books used in the system","title":"View bibliographic resources"},{"location":"SoftwareCodeDocumentation/client/","text":"Client app The client is a web application, build using Vue with it's tools plus the quasar framework for the UI components. Unlike the lite version this is heavier, polished and complete, the correct user experience. It's developed separately and connects to the server thought the rest api. The build can be deploy as a web site from the server or as a stand alone app from electron to run in desktop. Both versions require the back end services to run authentication and connect with other users.","title":"Client app"},{"location":"SoftwareCodeDocumentation/client/#client-app","text":"The client is a web application, build using Vue with it's tools plus the quasar framework for the UI components. Unlike the lite version this is heavier, polished and complete, the correct user experience. It's developed separately and connects to the server thought the rest api. The build can be deploy as a web site from the server or as a stand alone app from electron to run in desktop. Both versions require the back end services to run authentication and connect with other users.","title":"Client app"}]}